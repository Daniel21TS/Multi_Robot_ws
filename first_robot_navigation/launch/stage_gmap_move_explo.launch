<?xml version="1.0" encoding="UTF-8" ?>

<launch>
  <master auto="start"/>
  <param name="/use_sim_time" value="true"/>

  <!--TurtleBot 
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <param name="robot_description" command="$(find xacro)/xacro inorder
  	'$(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro'
  	laser_visual:=$(arg visible_laser)" /> FALTA 2 traÃ§os atras do inorder-->

  <!--Pionner 3dx -->
  <arg name="model" default="$(find p3dx_description)/urdf/pioneer3dx.xml"/>
  <param name="robot_description" textfile="$(arg model)" />

  <!--Gazebo World
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find first_robot_navigation)/worlds/Square_0.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include> -->

  <!--Stage World-->
  <include file="$(find rc_simul_worlds)/launch/2pioneers_stage_MR_SLAM.launch" />

  <!--Robot 0-->
  <group ns="robot_0">
    <arg name="prefix" value="robot_0"/>
    <arg name="init_pose_x" value="6.5"/>
    <arg name="init_pose_y" value="7.6"/>
    <arg name="init_pose_z" value="0.0"/>
    <arg name="init_pose_yaw" value="0.0"/>

    <!--TurtleBot
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="tf_prefix" value="$(arg prefix)"/>
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model $(arg prefix) -x $(arg init_pose_x) -y $(arg init_pose_y) -z $(arg init_pose_z) -Y $(arg init_pose_yaw) -param /robot_description" />
    	<remap from="robot_0/base_scan" to="scan"/>

    <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg prefix)_tf_broadcaster_odom"  args="0 0 0 0 0 0 /$(arg prefix)/odom /$(arg prefix)/base_footprint 100"/>
    -->

    <include file="$(find p3dx_description)/launch/p3dx_description.launch">
      <arg name="tf_prefix" value="$(arg prefix)" />
    </include>

    <include file="$(find first_robot_navigation)/launch/gmapping_navigation.launch">
      <arg name="namespace" value="$(arg prefix)" />
      <arg name="init_pose_x" value="$(arg init_pose_x)"/>
      <arg name="init_pose_y" value="$(arg init_pose_y)"/>
      <arg name="init_pose_z" value="$(arg init_pose_z)"/>
      <arg name="init_pose_yaw" value="$(arg init_pose_yaw)"/>
    </include>

  </group>

  <!--Robot 1-->
  <group ns="robot_1">
    <arg name="prefix" value="robot_1"/>
    <arg name="init_pose_x" value="6.0"/>
    <arg name="init_pose_y" value="5.5"/>
    <arg name="init_pose_z" value="0.0"/>
    <arg name="init_pose_yaw" value="0.0"/>

    <!--TurtleBot
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="tf_prefix" value="$(arg prefix)"/>
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model $(arg prefix) -x $(arg init_pose_x) -y $(arg init_pose_y) -z $(arg init_pose_z) -Y $(arg init_pose_yaw) -param /robot_description" />
    	<remap from="robot_1/base_scan" to="scan"/>

    <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg prefix)_tf_broadcaster_odom"  args="0 0 0 0 0 0 /$(arg prefix)/odom /$(arg prefix)/base_footprint 100"/>
    -->

    <include file="$(find p3dx_description)/launch/p3dx_description.launch">
      <arg name="tf_prefix" value="$(arg prefix)" />
    </include>

    <include file="$(find first_robot_navigation)/launch/gmapping_navigation.launch">
      <arg name="namespace" value="$(arg prefix)" />
      <arg name="init_pose_x" value="$(arg init_pose_x)"/>
      <arg name="init_pose_y" value="$(arg init_pose_y)"/>
      <arg name="init_pose_z" value="$(arg init_pose_z)"/>
      <arg name="init_pose_yaw" value="$(arg init_pose_yaw)"/>
    </include>

  </group>

  <group ns="map_merge">
    <node pkg="multirobot_map_merge" type="map_merge" respawn="false" name="map_merge" output="screen">
      <param name="robot_map_topic" value="map"/>
      <param name="robot_map_updates_topic" value="map_updates"/>
      <param name="known_init_poses" value="true"/>
      <param name="robot_namespace" value=""/>
      <param name="merged_map_topic" value="/map"/>
      <param name="world_frame" value="map_merged"/>
      <param name="known_init_poses" value="true"/>
      <param name="merging_rate" value="1.0"/>
      <param name="discovery_rate" value="0.05"/>
      <param name="estimation_rate" value="0.5"/>
      <param name="estimation_confidence" value="1.0"/>
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="static_tf_map_to_map_merged" args="-13.5 -5.5 0.0 0.0 0.0 0.0 map_merged map 10"  /> <!-- -18.5+5.0=-13.5 -10.5+5.0=-5.5 half of the initial map size + 2*offset -> check in gmapping_navigation.launch -->

  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find first_robot_navigation)/Rviz/multi_robot.rviz" >
     <remap from="move_base_simple/goal" to="robot_0/move_base_simple/goal"/>
  </node>

</launch>


